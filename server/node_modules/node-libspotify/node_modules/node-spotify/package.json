{
  "name": "node-spotify",
  "version": "0.6.0",
  "description": "A wrapper for libspotify",
  "keywords": [
    "spotify",
    "music"
  ],
  "homepage": "http://www.node-spotify.com",
  "bugs": {
    "url": "https://github.com/FrontierPsychiatrist/node-spotify/issues",
    "email": "moritz.schulze@gmail.com"
  },
  "license": "MIT",
  "author": {
    "name": "Moritz Schulze",
    "email": "moritz.schulze@gmail.com",
    "url": "http://www.node-spotify.com"
  },
  "main": "./build/Release/spotify.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/FrontierPsychiatrist/node-spotify"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "node-spotify\n============\nOverview\n--------\nnode-spotify is a node.js module to use the Spotify API in an easy manner from node.js.\n\nThe node.js module is a native module written mainly in C++.\n\nA webpage for the project is here: http://www.node-spotify.com.\n\nNotes\n-----\nI'm working toward version 1.0.0 which is not meant to provide everything libspotify offers. But I intend to wrap all libspotify types and provide methods\nto access them where possible. Options and convenience features my lack, though.\n\nRequirements\n------------\nYou need a spotify premium account to build or use node-spotify. This is a requirement for using libspotify, sorry. You also need an appkey that comes with a premium account (https://developer.spotify.com/technologies/libspotify/#application-keys).\n\nDependencies\n------------\nnode-gyp and libspotify are required for building. Under Linux you need libasound2-dev additionally. Install node-gyp via ```npm install -g node-gyp```.\n\nYour compiler must be able to translate some C++11 features (std::shared_ptr, G++ 4.7 or Clang 3.2 should do).\n\nCompiling\n---------\nCompiling was tested on Raspbian, Ubuntu and OSX. Due to the usage of pthreads I'm not sure if node-spotify will compile on Windows.\n\nIf you use OSX and have installed libspotify as a framework you need to edit the binding.gyp file. Remove \"-lspotify\" and write instead as one link option:\n```\"-framework OpenAL -framework libspotify\"```. This is due to a bug in node-gyp that will eliminate a duplicate \"-framework\" entry from the link settings. If you\nhave installed libspotify via homebrew you don't need this step.\n\nChange into the main folder (where binding.gyp lies) and run ```node-gyp configure && node-gyp build```.\n\nNow the spotify module lies in ./build/Release/spotify.js. You can use it in a node.js program like so\n\n```javascript\nvar spotify = require('./build/Release/spotify')( {\n  appkeyFile: './spotify_appkey.key'\n});\n```\n\nThe appkey file can be obtained from https://developer.spotify.com/technologies/libspotify/#application-keys (choose binary, not C-code).\n\nBinary distribution\n-------------------\nAs of version 0.4.0 downloads of the pure compiled node.js module are available at http://www.node-spotify.com. I'll try to provide OSX, Linux x86_64 (ALSA) and Linux ARMv6hf (ALSA) builds.\n\nHow to debug node-spotify\n-------------------------\nLaunch node.js and load node-spotify with require.\n\nAttach lldb with $PID=process id of node\n\n    lldb -p $PID\n\nSet a breakpoint with, for example\n\n    breakpoint set --file Album.cc --line 57\n\nIn the lldb console, execute this to continue the node.js process\n\n    cont\n\nNow you can execute commands in node.js. That lead to the breakpoint.\n\nIf you want to attach additional breakpoints, interrupt the process with\n\n    process interrupt\n\nin lldb.\n\nUsed software\n-------------\n* Base64 encoder from https://github.com/superwills/NibbleAndAHalf\n* Sound playback is heavily based on https://developer.spotify.com/docs/libspotify/12.1.51/examples.html\n",
  "readmeFilename": "README.md",
  "_id": "node-spotify@0.6.0",
  "_from": "node-spotify@^0.6.0"
}
