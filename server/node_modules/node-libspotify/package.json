{
  "name": "node-libspotify",
  "version": "0.1.0",
  "main": "lib/spotify.js",
  "dependencies": {
    "lodash": "^2.4.1",
    "node-spotify": "^0.6.0",
    "q": "^1.1.1",
    "request": "^2.48.0"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "gulp": "^3.8.10",
    "gulp-jshint": "^1.9.0",
    "gulp-mocha": "^2.0.0",
    "gulp-plumber": "^0.6.6",
    "jshint-stylish": "^1.0.0",
    "mocha": "^2.0.1",
    "proxyquire": "^1.1.0",
    "run-sequence": "^1.0.2",
    "sinon": "^1.12.1",
    "sinon-chai": "^2.6.0",
    "sinon-promise": "^0.1.3"
  },
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/JohanObrink/node-libspotify.git"
  },
  "keywords": [
    "spotify",
    "libspotify",
    "node",
    "spotify",
    "web",
    "api",
    "music"
  ],
  "author": {
    "name": "Johan Öbrink",
    "email": "johan.obrink@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/JohanObrink/node-libspotify/issues"
  },
  "homepage": "https://github.com/JohanObrink/node-libspotify",
  "readme": "node-libspotify\n===============\n\nA wrapper for the node wrapper for libspotify. Because - you know - you can never have to many levels of abstraction. Also, the node-spotify lib is not entirely, but almost, unlike any code you would ever write or access in node.\n\nIt also wraps the new spotify web api so the songs passed around are in the new format even if, internally, the played songs are in the old. Search is performed through the api instead of through libspotify.\n\n#How to\n\nMake sure the prerequisites are met. Then install:\n\n```shell\nnpm install node-libspotify\n```\n\n##Create a Spotify client and login (requires a premium account)\n```javascript\nvar Spotify = require('node-libspotify');\nvar appKeyPath = '[path to spotify_appkey.key]';\nvar spotify = new Spotify({appkeyFile: appKeyPath});\nspotify.login('username', 'password')\n  .then(function () {\n    //logged in\n  })\n  .catch(function (err) {\n    //wrong username and/or password\n  });\n```\n\n###Play\n```javascript\nvar track = {\n  uri: 'spotify:track:7gss5MqLM5sHlHOl2EAbrp'\n};\nspotify.player.on('play', function (track) { /* play event */ });\nspotify.player.on('pause', function () { /* pause event */ });\nspotify.player.on('progress', function (progress) { /* progress event */ });\nspotify.player.play(track);\n```\n\n###Search\n```javascript\nspotify.search('Austrian death machine')\n  .then(function (result) {\n    //matching artists, albums, tracks and playlists\n  })\n  .catch(function (err) {\n    //search error\n  });\n```\n\n\n\n#Prerequisites\n\n##App key\nCreate an app key at https://devaccount.spotify.com/my-account/keys/\n\nDownload key as [Binary] and save it as ```spotify_appkey.key``` in app root\n\n##libspotify\n\n###Mac\n```shell\nbrew update\nbrew upgrade\nbrew install homebrew/binary/libspotify\n```\n####If linking fails\nRun ```sudo chown -R `whoami` /usr/local/share/man/man3``` or whatever directory the linking function is complaining about,\nand then ```brew link libspotify```\n\n###All\n```shell\nnpm install\n```\n####If install fails\nRun ```sudo chown -R `whoami` ~/.npm/```\n\n### If run fails with Error: dlopen\nRun ```sudo ln -s /usr/local/opt/libspotify/lib/libspotify.12.1.51.dylib /usr/local/opt/libspotify/lib/libspotify``` to symlink the dylib\n\n\n\nThe MIT License (MIT)\n----------------------\n\nCopyright (c) 2014 Johan Öbrink\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "description": "node-libspotify ===============",
  "_id": "node-libspotify@0.1.0",
  "_from": "node-libspotify@"
}
